/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct version {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgobject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct C_Visitor {
    _unused: [u8; 0],
}
pub type version_t = version;
pub type sgobject_t = sgobject;
pub type cvisitor_t = C_Visitor;
pub const RETURN_CODE_SUCCESS: RETURN_CODE = 0;
pub const RETURN_CODE_ERROR: RETURN_CODE = 1;
pub type RETURN_CODE = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgobject_result {
    pub return_code: RETURN_CODE,
    pub result: sgobject_result_ResultUnion,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sgobject_result_ResultUnion {
    pub result: *mut sgobject_t,
    pub error: *const ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sgobject_result_ResultUnion() {
    assert_eq!(
        ::std::mem::size_of::<sgobject_result_ResultUnion>(),
        8usize,
        concat!("Size of: ", stringify!(sgobject_result_ResultUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<sgobject_result_ResultUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(sgobject_result_ResultUnion))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sgobject_result_ResultUnion>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgobject_result_ResultUnion),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sgobject_result_ResultUnion>())).error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgobject_result_ResultUnion),
            "::",
            stringify!(error)
        )
    );
}
#[test]
fn bindgen_test_layout_sgobject_result() {
    assert_eq!(
        ::std::mem::size_of::<sgobject_result>(),
        16usize,
        concat!("Size of: ", stringify!(sgobject_result))
    );
    assert_eq!(
        ::std::mem::align_of::<sgobject_result>(),
        8usize,
        concat!("Alignment of ", stringify!(sgobject_result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sgobject_result>())).return_code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgobject_result),
            "::",
            stringify!(return_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sgobject_result>())).result as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgobject_result),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Result {
    pub return_code: RETURN_CODE,
    pub error: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Result() {
    assert_eq!(
        ::std::mem::size_of::<Result>(),
        16usize,
        concat!("Size of: ", stringify!(Result))
    );
    assert_eq!(
        ::std::mem::align_of::<Result>(),
        8usize,
        concat!("Alignment of ", stringify!(Result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Result>())).return_code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Result),
            "::",
            stringify!(return_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Result>())).error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Result),
            "::",
            stringify!(error)
        )
    );
}
pub const TYPE_INT32: TYPE = 0;
pub const TYPE_INT64: TYPE = 1;
pub const TYPE_FLOAT32: TYPE = 2;
pub const TYPE_FLOAT64: TYPE = 3;
pub const TYPE_SGOBJECT: TYPE = 4;
pub type TYPE = u32;
pub const SG_TYPE_SG_KERNEL: SG_TYPE = 0;
pub const SG_TYPE_SG_MACHINE: SG_TYPE = 1;
pub const SG_TYPE_SG_DISTANCE: SG_TYPE = 2;
pub const SG_TYPE_SG_FEATURES: SG_TYPE = 3;
pub const SG_TYPE_SG_FILE: SG_TYPE = 4;
pub const SG_TYPE_SG_COMBINATION_RULE: SG_TYPE = 5;
pub const SG_TYPE_SG_LABELS: SG_TYPE = 6;
pub type SG_TYPE = u32;
extern "C" {
    pub fn get_cvisitor_type(arg1: *const cvisitor_t) -> TYPE;
}
extern "C" {
    pub fn get_cvisitor_typename(arg1: *const cvisitor_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_cvisitor_pointer(arg1: *const cvisitor_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn create_version() -> *mut version_t;
}
extern "C" {
    pub fn destroy_version(arg1: *mut version_t);
}
extern "C" {
    pub fn get_version_main(arg1: *mut version_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn destroy_sgobject(arg1: *mut sgobject_t);
}
extern "C" {
    pub fn to_string(arg1: *const sgobject_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sgobject_get(
        arg1: *const sgobject_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut cvisitor_t;
}
extern "C" {
    pub fn sgobject_put(
        arg1: *mut sgobject_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: TYPE,
    ) -> Result;
}
extern "C" {
    pub fn sgobject_put_array(
        arg1: *mut sgobject_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: u32,
        arg5: u32,
        arg6: TYPE,
    ) -> Result;
}
extern "C" {
    pub fn sgobject_derived_type(arg1: *const sgobject_t) -> SG_TYPE;
}
extern "C" {
    pub fn create_machine(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn train_machine(arg1: *mut sgobject_t, arg2: *mut sgobject_t) -> Result;
}
extern "C" {
    pub fn apply_machine(arg1: *mut sgobject_t, arg2: *mut sgobject_t) -> sgobject_result;
}
extern "C" {
    pub fn apply_multiclass_machine(
        arg1: *mut sgobject_t,
        arg2: *mut sgobject_t,
    ) -> sgobject_result;
}
extern "C" {
    pub fn create_kernel(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn init_kernel(
        arg1: *mut sgobject_t,
        arg2: *mut sgobject_t,
        arg3: *mut sgobject_t,
    ) -> Result;
}
extern "C" {
    pub fn create_distance(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn create_features(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn create_features_from_data(
        arg1: *const ::std::os::raw::c_void,
        rows: u32,
        cols: u32,
        arg2: TYPE,
    ) -> sgobject_result;
}
extern "C" {
    pub fn create_features_from_file(arg1: *const sgobject_t) -> sgobject_result;
}
extern "C" {
    pub fn create_labels(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn create_labels_from_file(arg1: *const sgobject_t) -> sgobject_result;
}
extern "C" {
    pub fn create_file(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn read_csvfile(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn create_combination_rule(arg1: *const ::std::os::raw::c_char) -> sgobject_result;
}
extern "C" {
    pub fn set_parallel_threads(arg1: i32);
}
